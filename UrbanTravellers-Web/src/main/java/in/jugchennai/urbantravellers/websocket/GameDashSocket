/*
 * Copyright 2013 JUGChennai.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package in.jugchennai.urbantravellers.websocket;

import in.jugchennai.urbantravellers.game.GameBoard;
import in.jugchennai.urbantravellers.game.Player;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.websocket.EncodeException;
import javax.websocket.Session;
import javax.websocket.WebSocketClose;
import javax.websocket.WebSocketEndpoint;
import javax.websocket.WebSocketMessage;
import javax.websocket.WebSocketOpen;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

/**
 *
 * @author prasannakumar
 * @author MahiRaj Gosemath
 */
@WebSocketEndpoint(value = "/UTGameDashSocket",
encoders = {DataEncoder.class},
decoders = {DataDecoder.class})
public class GameDashSocket extends UTSocket {

    /**
     *
     * @param gd
     * @param peer
     * @throws IOException
     * @throws EncodeException
     * @throws JSONException
     */
    @WebSocketMessage
    public void broadCastMessage(GameData gd, Session peer)
            throws IOException, EncodeException, JSONException {
        String type=gd.getJson().getString("type");
        System.out.println("JSON Received");
        if(type.equals("loadGames"))
        {
            JSONObject jSONObject = gd.getJson();
            jSONObject.put("type", "loadGames");
            if(cache.getBoards().isEmpty())
            {  
                jSONObject.put("status", "no_game");        
            }
            else
            {                
                jSONObject=prepareGameDash(gd);
            }
            gd.setJson(jSONObject);
            peer.getRemote().sendObject(gd);
        }
        if(type.equals("createGame"))
        {
            try
            {
                Thread.sleep(2000);
            }catch(Exception e){}
            System.out.println("Game Created.");
            gd.setJson(prepareGameDash(gd));  
            System.out.println("JSON Created");
            for (Session currPeer : peers) {
                //if(!currPeer.equals(peer)) {
                currPeer.getRemote().sendObject(gd);
                // }
            } 
        }
        if(type.equals("gameJoined"))
        {
            System.out.println("Game joined by a player.");
            String player=gd.getJson().getString("playerName");
            String game=gd.getJson().getString("gameId");
            try
            {
                Player addPlayer=new Player(player);
                GameBoard board=cache.getBoard(game);
                board.addPlayerToBoard(addPlayer);
                Set<String> playersOnBoard=board.getPlayersOnBoard();
                Map<String, Integer> playersPosition=new HashMap();
                for(String s : playersOnBoard)
                {
                    Player temp=board.getPlayer(s);
                    int position=temp.getPosition();
                    playersPosition.put(s, position);
                }
                JSONObject jSONObject = gd.getJson();
                jSONObject.accumulate("players", playersPosition);
                gd.setJson(jSONObject);
                for (Session currPeer : peers) {
                    //if(!currPeer.equals(peer)) {
                    currPeer.getRemote().sendObject(gd);
                    // }
                } 
            }
            catch(Exception e)
            {
                
            }
        }
        if(type.equals("roll"))
        {
            String gameId=gd.getJson().getString("gameId");
            String player=gd.getJson().getString("playerName");
            try
            {
                GameBoard board=cache.getBoard(gameId);
                Player temp=board.getPlayer(player);
                int diceValue=gd.getJson().getInt("diceValue");
                temp.setDiceValue(diceValue);
                int position=temp.getPosition();
                int newPosition=diceValue+position;
                temp.setPosition(newPosition);
                Set<String> playersOnBoard=board.getPlayersOnBoard();
                Map<String, Integer> playersPosition=new HashMap();
                for(String s : playersOnBoard)
                {
                    Player temporary=board.getPlayer(s);
                    int newposition=temporary.getPosition();
                    playersPosition.put(s, newposition);
                }
                JSONObject jSONObject = gd.getJson();
                jSONObject.accumulate("players", playersPosition);
                gd.setJson(jSONObject);
                for (Session currPeer : peers) {
                    //if(!currPeer.equals(peer)) {
                    currPeer.getRemote().sendObject(gd);
                    // }
                } 
            }catch(Exception e){}
        }
    }

    /**
     *
     * @param gd
     * @return
     * @throws JSONException
     */
    private JSONObject prepareGameDash(GameData gd) throws JSONException {
        JSONObject jSONObject = gd.getJson();
        Map<String, GameBoard> map = cache.getBoards();
        System.out.println("Cache lenght : "+cache.getBoards().size());
        for (String key : map.keySet()) {
            System.out.println("Debug : "+key+" "+map.get(key).hasGameStarted());
            if (!map.get(key).hasGameStarted()) {
                System.out.println(key);
                jSONObject.put("type", "createGame");
                jSONObject.put("status", "active");
                jSONObject.put("gameId", key);
                jSONObject.put("players", map.get(key).getCurrentPlayersOnBoard());
                System.out.println("JSON "+jSONObject);
            }
        }
        return jSONObject;
    }

    @WebSocketOpen
    public void onOpen(Session peer) throws Exception {
        peers.add(peer);
    }

    @WebSocketClose
    public void onClose(Session peer) {
        peers.remove(peer);
    }
}
